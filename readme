# DOCUMENTACION BASE 
https://www.aerocivil.gov.co/servicios-a-la-navegacion/servicio-de-informacion-aeronautica-ais/Documents/Forms/AllItems.aspx



project_root/
├── data/                              # Datos (ej. archivos de prueba, bases de datos)
├── notebooks/                         # Exploración y experimentación (Jupyter notebooks)
├── scripts/                           # Scripts de utilidad (ej. para tareas repetitivas)
├── src/                         
│   ├── core/                          # Núcleo del dominio
│   │   ├── entities/                  # Entidades del dominio
│   │   ├── use_cases/                 # Casos de uso
│   │   ├── services/                  # Servicios del dominio (lógica de negocio compleja)
│   │   ├── ports/                     # Interfaces (puertos) para interactuar con el exterior
│   │   └── exceptions/                # Excepciones específicas del dominio
│   ├── infrastructure/                # Implementación de los puertos
│   │   ├── adapters/                  # Adaptadores que implementan los puertos
│   │   │   ├── inbound/               # Adaptadores para las entradas (ej. API, UI)
│   │   │   │   └── web/               # Adaptador para la interfaz web (React)
│   │   │   │       ├── react_frontend/# Código fuente de la app React
│   │   │   │       └── main.py        # Punto de entrada de la API
│   │   │   └── outbound/              # Adaptadores para las salidas (ej. base de datos, servicios externos)
│   │   │       └── database/          # Adaptador para la base de datos
│   │   │       └── api_client/        # Adaptador para un servicio externo
│   │   ├── config/                    # Configuración de la infraestructura
│   │   └── logging/                   # Configuración de logs
│   ├── entrypoints/                   # Puntos de entrada principales de la aplicación
│   │   └── api/                       # Punto de entrada para la API (Flask, FastAPI, etc.)
│   └── tests/                         # Pruebas unitarias y de integración
│       ├── core/                      # Pruebas para el dominio
│       └── infrastructure/            # Pruebas para la infraestructura
└── requirements.txt                   # Lista de dependencias del proyecto

# instalacion de dependencias del proyecto de python usar python >= 3.12
pip install -r requirements.txt

# activacion de backend FastAPI
uvicorn src.entrypoints.api.main:app --reload
# especificando el puerto especifico
uvicorn src.entrypoints.api.main:app --reload --port 8080 

# ejecutar aplicacion React 
# desde src/infrastructure/adapters/inbound/web/react_frontend
npm install 
npm start #dev
# instalar
npm install --save-dev web-vitals


# revisar frontend desde : 
http://localhost:3000


# Aproximacion a analisis exploratorio . 
primero sacar la demanda de de vuelos por hora  , es decir sacar los vuelos que se presentas por semana por hora
es decir sacar el conteo de vuelos por hora para cada semana del mes.
luego dependiendo del volumen de vuelos sacar la demanda de controladores por hora , 
luego sacar la demanda de controladores por semana del mes
1. vuelos por hora sacar horas picos y horas valle en un mes, casa mes en particular, pues marzo por ejemplo puede
ser temporada baja , pero diciembre temporada alta.


Control de Autorizaciones (DEL):

Proporciona autorizaciones de plan de vuelo a las aeronaves salientes.
Verifica que todos los planes de vuelo cumplan con las regulaciones.
Control de Tierra (GND):

Guía a las aeronaves en tierra, desde las puertas de embarque hasta la pista de despegue y viceversa.
Coordina el movimiento de vehículos de servicio en el área de maniobras.
Control de Torre (TWR):

Autoriza despegues y aterrizajes.
Supervisa el tráfico aéreo en el área inmediata del aeropuerto.
Controla los aviones que operan bajo reglas de vuelo visual (VFR).
Control de Aproximación (APP):

Gestiona las aeronaves en aproximación y salida dentro de un radio específico del aeropuerto.
Transfiere el control de las aeronaves al controlador de torre para el aterrizaje.
Control de Ruta o Área (ACC):

Gestiona el tráfico aéreo en ruta, fuera del área inmediata del aeropuerto.
Utiliza radares y tecnología avanzada para monitorear la posición y condiciones de vuelo de las aeronaves.
Flujo de Trabajo
Inicio del Turno:

Revisión de informes meteorológicos y de tráfico.
Coordinación con otros controladores y personal de apoyo.
Durante el Turno:

Monitoreo constante de las pantallas de radar.
Comunicación continua con los pilotos para dar instrucciones y autorizaciones.
Coordinación con otros controladores para transferir el control de las aeronaves entre sectores.
Final del Turno:

Informe de relevos al siguiente controlador.
Documentación de cualquier incidente o irregularidad.




1. Tres TreeMaps para:
   
   - Distribución de vuelos por origen
   - Distribución de vuelos por destino
   - Distribución de vuelos por aerolínea
2. Un gráfico de barras para:
   
   - Distribución de tipos de vuelo
Todos los gráficos responden a los mismos filtros, lo que permite un análisis comparativo muy completo. ¿Te gustaría agregar alguna otra visualización? Por ejemplo:

- Un gráfico de líneas para mostrar tendencias temporales por mes/año
- Un gráfico circular para la distribución de tipos de aeronaves
- Un mapa de calor para mostrar las rutas más frecuentes
- Un gráfico de barras apiladas para mostrar la distribución de niveles de vuelo
¡Déjame saber si quieres explorar alguna de estas opciones!